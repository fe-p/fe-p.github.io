{"version":3,"sources":["page/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Wrap","styled","div","main","to","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6sEAKA,IAAMA,EAAOC,IAAOC,IAAV,KAqCK,SAASC,IACpB,OACE,kBAACH,EAAD,KACI,kBAAC,IAAD,CAAMI,GAAI,QACR,yBAAKC,UAAU,QACb,+EACA,sFAGJ,kBAAC,IAAD,CAAMD,GAAI,QACR,yBAAKC,UAAU,SACb,wCACA,iCAGJ,6BAASA,UAAU,mBACjB,6BACE,4BAAI,kBAAC,IAAD,CAAMD,GAAI,QAAV,iDAEN,6BACE,4BAAI,kBAAC,IAAD,CAAMA,GAAI,QAAV,mD,yaCvDlB,IAAMJ,EAAOC,IAAOC,IAAV,KAoBKI,MARf,WACE,OACI,kBAAC,EAAD,KACE,kBAAC,EAAD,QCVYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c577f3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Wrap = styled.div`\r\n* {margin: 0; padding: 0;}\r\nwidth: 100%;\r\n\r\n.scrollingBanner {position: relative; width: 100%; height: 100vh; display: flex; overflow: hidden;}\r\n.scrollingBanner div {position: relative; width: 75%; background: #151515; overflow: hidden;}\r\n.scrollingBanner div:nth-child(1) {width: 25%; background: url(https://user-images.githubusercontent.com/54713067/87456802-69007400-c642-11ea-80e7-21442c4eaee6.png); background-size: cover;}\r\n.scrollingBanner div:nth-child(1) h2 a {-webkit-text-stroke: 1px; -webkit-text-stroke-color: #fff; -webkit-text-fill-color: transparent; left: 100%;}\r\n.scrollingBanner div h2 {position: relative; font-family: 'Roboto';}\r\n.scrollingBanner div h2 a {position: absolute; white-space: nowrap; font-size: 15em; color: #222; line-height: 165vh; animation: animate 60s linear infinite; height: 30%; bottom: 0;}\r\n.scrollingBanner div h2:hover a {color: #000;}\r\n.scrollingBanner div:nth-child(1) h2:hover a {-webkit-text-stroke: 1px; -webkit-text-stroke-color: #000; -webkit-text-fill-color: transparent; left: 100%;}\r\n\r\n.left {background: none; -webkit-transform: rotate(-90deg); -moz-transform: rotate(-90deg); -ms-transform: rotate(-90deg); -o-transform: rotate(-90deg);\r\n color: #bbb; text-align : right; font-size: 1.2rem; position: absolute; top: 320px; left: -250px; z-index: 2;}\r\n.left:hover {opacity: .8;}\r\n\r\n.right {position: absolute; top: 35px; right: 40px; z-index: 2; display: flex; align-items: center;}\r\n.right p {color: #555; margin-right: 15px;}\r\n.right span {width: 180px; border-bottom: 1px solid #444; height: 2px;}\r\n.right:hover {opacity: .8;}\r\n\r\n@keyframes animate {\r\n  0% {transform: translateX(0);}\r\n  100% {transform: translateX(-100%);}\r\n}\r\n\r\n@media all and (max-width:768px) {\r\n  .scrollingBanner div:nth-child(1) {width: 30%;}\r\n  .scrollingBanner div h2 a {font-size: 9.5em; line-height: 175vh;}\r\n\r\n  .left p {font-size: 0.875rem;}\r\n  .left {top: 240px; left: -180px;}\r\n  .right span {width: 70px;}\r\n}\r\n`\r\n\r\nexport default function main() {\r\n    return (\r\n      <Wrap>\r\n          <Link to={\"/nav\"}>\r\n            <div className=\"left\">\r\n              <p>Resume / Graphic Design / Web Design & Publising</p>\r\n              <p>UIUX WebApp Design / Data visualization & Infographic</p>\r\n            </div>\r\n          </Link>\r\n          <Link to={\"/nav\"}>\r\n            <div className=\"right\">\r\n              <p>2012-2020</p>\r\n              <span></span>\r\n            </div>\r\n          </Link>\r\n          <section className=\"scrollingBanner\">\r\n            <div>\r\n              <h2><Link to={\"/nav\"}>Interaction designer & Front end developer.</Link></h2>\r\n            </div>\r\n            <div>\r\n              <h2><Link to={\"/nav\"}>Interaction designer & Front end developer.</Link></h2>\r\n            </div>\r\n          </section>\r\n      </Wrap>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// import Index from './page/index';\r\nimport Main from './page/main';\r\n\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  top: 0;\r\n  position: relative;\r\n  .datavisualize {display: flex;}\r\n  cursor: url(https://cdn.custom-cursor.com/db/cursor/32/Gray_cursor.png), pointer;\r\n  & a:hover {cursor: url(https://cdn.custom-cursor.com/db/cursor/32/Orange_cursor.png), pointer;}\r\n`\r\n\r\nfunction App() {\r\n  return (\r\n      <Wrap>\r\n        <Main />\r\n      </Wrap>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}